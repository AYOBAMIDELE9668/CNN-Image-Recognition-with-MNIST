# -*- coding: utf-8 -*-
"""CNN Image Recognition with MNIST

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1cFlL_ePaa-mhGvodCjGo0kj5hRWXrMY9
"""

import numpy as np
import struct
import matplotlib.pyplot as plt
import tensorflow as tf

def load_mnist_images(file_path):
    with open(file_path, 'rb') as f:
        magic, num_images, rows, cols = struct.unpack('>IIII', f.read(16))
        image_data = np.frombuffer(f.read(), dtype=np.uint8)
        images = image_data.reshape(num_images, rows, cols)
    return images

from google.colab import files
uploaded = files.upload()

test_images = load_mnist_images("t10k-images.idx3-ubyte")

for i in range(5):
    plt.imshow(test_images[i], cmap='gray')
    plt.title(f"Test Image #{i}")
    plt.axis('off')
    plt.show()

(x_train, y_train), (x_val, y_val) = tf.keras.datasets.mnist.load_data()

x_train = x_train.astype('float32') / 255.0
x_val = x_val.astype('float32') / 255.0
test_images = test_images.astype('float32') / 255.0

x_train = x_train[..., np.newaxis]
x_val = x_val[..., np.newaxis]
test_images = test_images[..., np.newaxis]

model = tf.keras.Sequential([
    tf.keras.layers.Conv2D(32, (3, 3), activation='relu', input_shape=(28, 28, 1)),
    tf.keras.layers.MaxPooling2D(2, 2),
    tf.keras.layers.Conv2D(64, (3, 3), activation='relu'),
    tf.keras.layers.MaxPooling2D(2, 2),
    tf.keras.layers.Flatten(),
    tf.keras.layers.Dense(128, activation='relu'),
    tf.keras.layers.Dense(10, activation='softmax')  # 10 output classes
])

model.compile(optimizer='adam',
              loss='sparse_categorical_crossentropy',
              metrics=['accuracy'])

model.fit(x_train, y_train, epochs=5, validation_data=(x_val, y_val))

predictions = model.predict(test_images[:5])

for i, pred in enumerate(predictions):
    plt.imshow(test_images[i].reshape(28, 28), cmap='gray')
    plt.title(f"Predicted: {np.argmax(pred)}")
    plt.axis('off')
    plt.show()

model.save("mnist_cnn_model.h5")